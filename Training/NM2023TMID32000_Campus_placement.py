# -*- coding: utf-8 -*-
"""NM_Project_College.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/spponns/Machine-Learning/blob/main/NM_Project_College.ipynb
"""

import numpy as np
import pandas as pd
from  google.colab import files
import io
import os
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics
from sklearn.model_selection import cross_val_score
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import joblib

data=files.upload()

df=pd.read_csv(r"/content/collegePlace.csv")
df

df.info()

df.isnull().sum()

def transformationplot (feature):
  plt.figure(figsize=(12,5))
  plt.subplot(1,2,1)
  sns.distplot(feature)
transformationplot(np.log(df['Age']))

df=df.replace(['Male'],[0])
df=df.replace(['Female'],[1])
df=df.replace(['Computer Science','Information Technology','Electronics And Communication','Mechanical','Electrical','Civil'],[0,1,2,3,4,5])
df=df.drop(['Hostel'],axis=1)
df

plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
sns.distplot(df['CGPA'],color='r')

plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
sns.distplot(df['PlacedOrNot'],color='g')

plt.figure(figsize=(18,4))
plt.subplot(1,4,1)
sns.countplot(df['Gender'])
plt.subplot(1,4,2)
sns.countplot(df['Internships'])

plt.figure(figsize=(20,5))
plt.subplot(131)
sns.countplot(x=df['PlacedOrNot'],hue=df['CGPA'])

sns.swarmplot(x=df["PlacedOrNot"],y=df["CGPA"],hue=df['Stream'])

scaler = StandardScaler()

scaler.fit(df.drop('PlacedOrNot',axis=1))

scaled_features = scaler.transform(df.drop('PlacedOrNot',axis=1))
scaled_features = pd.DataFrame(scaled_features, columns = df.columns[:-1])
scaled_features.head()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(scaled_features,
                                                    df['PlacedOrNot'],
                                                    test_size = 0.25,
                                                    stratify=df['PlacedOrNot'],
                                                    random_state = 0)

cl=svm.SVC(kernel="linear")
cl.fit(X_train,y_train)
#SVC(kernel='linear')
xtp=cl.predict(X_train)
tda=accuracy_score(xtp,y_train)
print("Accuracy of the data : ",tda)

best_k={"Regular":0}
best_score={"Regular":0}
for k in range(3,50,2):
    knn_temp = KNeighborsClassifier(n_neighbors=k)
    knn_temp.fit(X_train,y_train)
    knn_temp_pred=knn_temp.predict(X_test)
    score=metrics.accuracy_score(y_test,knn_temp_pred)*100
    if score >= best_score["Regular"] and score < 100:
      best_score["Regular"] =100
      best_k["Regular"]=k
  
print("---Results---\nK:{}\nScore:{}".format(best_k,best_score))
knn=KNeighborsClassifier(n_neighbors=best_score["Regular"])
knn.fit(X_train,y_train)
knn_pred=knn.predict(X_test)
testd=accuracy_score(knn_pred,y_test)

import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from tensorflow.keras import layers

classifier=Sequential()
classifier.add(keras.layers.Dense(6,activation='relu'))
classifier.add(keras.layers.Dropout(0.50))

classifier.add(keras.layers.Dense(6,activation='relu'))
classifier.add(keras.layers.Dropout(0.50))

classifier.add(keras.layers.Dense(1,activation='sigmoid'))

loss_1=tf.keras.losses.BinaryCrossentropy()
classifier.compile(optimizer="Adam",loss=loss_1,metrics=['accuracy'])

classifier.fit(X_train,y_train,batch_size=20,epochs=100)

import pickle
pickle.dump(knn,open("Placement.pkl","wb"))
model=pickle.load(open("Placement.pkl","rb"))

